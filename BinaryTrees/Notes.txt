1. Full BT: has 0 or 2 children
2. Complete BT:
A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled,
and all nodes are as far left as possible.
Eg:
        1
       / \
      2   3
     / \ /
    4  5 6
    All levels are completely filled.
    The last level has all nodes in the left.
    Left Height of a subtree=Right Height of subtree
    Height=LogN (Since it's complete BT, at worst case also height will not be N )
    No. of Nodes=2^h-1
3. Perfect BT:
    All leaf nodes are at the same level
4. Balanced BT:
    Height of the tree at max log(N) , where N is the number of nodes
    For every node, height(left tree)-height(right tree) <= 1
 5. Degenerate Trees:
    Skewed BT; in single line like linked list

 DFS Traversal:
 1. Preorder - Root Left Right
 2. PostOrder - Left Right Root
 3. Inorder - Left Root Right ; NOTE: Inorder traversal of a BST is always sorted.
 Level-order Traversal:
 ZigZag Travesal: Level-order travesal with flag to reverse direction

 Any traversal will take O(N), where N is the number of nodes

 To get the leaf nodes- use any travesal and check of left and right are null.
 Naturally use postorder, since it prints the leaf nodes first

 In general BT height is logN

Diameter of a Binary Tree:
1. Longest Path between two nodes
2. Path doesn't need to pass via root

BST:
In a balanced BST, height=O(LogN)
In a unbalanced BST, height=O(N)  (i.e., it degenerates into a linked list)

