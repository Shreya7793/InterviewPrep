Issue Resolution System
Functional Requirements:
Customer should be able to raise a issue for any transactions
Customer Service Agents can search customer issue with issue id or customer details (email)
Agents have the list of issues assigned against them, which they will work on to resolve and mark the ticket Resolve

Trasaction Failed State:
FAILED state
PENDING state

Reason:
Bank failure
NPCI issue
some internal PhonePe errors

Customer Issue Types
1. Payment Related
2. Mutual Fund Related
3. Gold related
4. Insurance Related

Agent
Customer Service agents can have their own expertise based on the issue type.
Customer Service Agent work on the issues assigned to them and update the status of the issue.
If all the customer service agents are already working on a ticket,then the tickets are added to the waiting list
of those agents which can be picked after the current ticket is marked resolved

Key Features:
Customer should be able to raise a issue for any transactions -> Customer
Customer Service Agents can search customer issue with issue id or customer details (email)-> customer
Agents have the list of issues assigned against them, which they will work on to resolve and mark the ticket Resolve -> Agent

Issue
IssueId
IssueType

Customer
customerId
email
name


Functions:
createIssue(transactionId, issueType, subject, description, email)
addAgent(agentEmail, agentName ,List<issueType>)
assignIssue(issueId) /* Issue can be assigned to the agents based on different strategies.
For now, assign to any one of the free agents. */
getIssues(filter)  // issues against the provided filter
updateIssue(issueId, status, resolution)
resolveIssue(issueId, resolution)
viewAgentsWorkHistory() // a list of issue which agents worked on

createIssue("T1", "Payment Related", "Payment Failed", "My payment failed but money is debited", “testUser1@test.com”);
>>> Issue I1 created against transaction "T1"

createIssue("T2", "Mutual Fund Related", "Purchase Failed", "Unable to purchase Mutual Fund", “testUser2@test.com”);
>>> Issue I2 created against transaction "T2"

createIssue("T3", "Payment Related", "Payment Failed", "My payment failed but money is debited", , “testUser2@test.com”);
>>> Issue I3 created against transaction "T3"

addAgent(“agent1@test.com”, “Agent 1”, Arrays.asList("Payment Related", "Gold Related"));
>>> Agent A1 created


addAgent(“agent2@test.com”, “Agent 2”, Arrays.asList("Payment Related"));
>>> Agent A2 created


assignIssue("I1")
>>> Issue I1 assigned to agent A1

assignIssue("I2")
>>> Issue I2 assigned to agent A2

assignIssue("I3")
>>> Issue I3 added to waitlist of Agent A1



getIssue({"email": "testUser2@test.com"});
>>> I2 {"T2", "Mutual Fund Related", "Purchase Failed", "Unable to purchase Mutual Fund", "testUser2@test.com", "Open"},
 I3 {"T3", "Payment Related", "Payment Failed", "My payment failed but money is debited", , "testUser2@test.com", "Open"}

getIssue({"type": "Payment Related"});
>>> I1{"T1", "Payment Related", "Payment Failed", "My payment failed but money is debited", "testUser1@test.com", "Open"},
 I3 {"T3", "Payment Related", "Payment Failed", "My payment failed but money is debited", "testUser1@test.com", "Open"}

updateIssue("I3", "In Progress", "Waiting for payment confirmation");
>>> I3 status updated to In Progress

resolveIssue("I3", "PaymentFailed debited amount will get reversed");
>>> I3 issue marked resolved


viewAgentsWorkHistory()
>>> A1 -> {I1, I3},
    A2 -> {I2}
