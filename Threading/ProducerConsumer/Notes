Producer-Consumer Problem:

The producer produces some items and pushes them into the memory buffer.
A consumer then consumes these items by popping them out of the buffer.
If the buffer is empty, then the consumer waits for the producer to push an item, which it consumes after the producer pushes it.

1. Producer and Consumer tasks run in separate threads
2. Common data bus, typically a message queue, used by both producer and consumer.
3. If not full, producer pushes data into queue, or waits for it to be consumed
4. If not empty, consumer takes data out of the queue, or waits for producer to publish.

Ref: https://www.freecodecamp.org/news/java-multithreading-producer-consumer-problem/

- Using 'synchronised' keyword we have only one thread can access a shared resource at a time to ensure consistency.
Now, we need to establish communication between the producer and consumer thread
-  If the queue is full, the producer needs to wait for a consumer to consume an item.
Similarly, if the queue is empty, the consumer needs to wait until the producer pushes an item
- When the wait() method is called, the thread releases the lock on the object
and enters a waiting state until another thread calls the notify() or notifyAll() method.

Blocking Queue:
 while working on real-time applications, we probably won't implement synchronization manually.
 Instead, we can use the BlockingQueue class from java.util.concurrent package.
 The difference between Queue and BlockingQueue is that it waits for the queue to become non-empty before a message can
 be consumed. Similarly, it waits for the queue to have space before publishing a new message.